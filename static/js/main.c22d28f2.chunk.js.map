{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useEffect","Aos","init","className","data-aos","data-aos-duration","src","width","height","frameborder","allow","allowfullscreen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+KAyIeA,MA5Hf,WAKE,OAJAC,qBAAU,WACRC,IAAIC,SACH,IAGD,yBAAKC,UAAU,OACb,yBAAKA,UAAU,QACb,4BAAQA,UAAU,aAAaC,WAAS,OAAOC,oBAAkB,SAC/D,kEACA,yBAAKF,UAAU,WAAWG,IAAI,oBACzBF,WAAS,gBAAgBC,oBAAkB,SAChD,yBAAKF,UAAU,WAAWG,IAAI,oBACzBF,WAAS,aAAaC,oBAAkB,SAC7C,yBAAKF,UAAU,WAAWG,IAAI,qBACzBF,WAAS,YAAYC,oBAAkB,SAC5C,yBAAKF,UAAU,WAAWG,IAAI,mBACzBF,WAAS,eAAeC,oBAAkB,WAKnD,yBAAKF,UAAU,SACb,4BAAQA,UAAU,WAAWC,WAAS,YAAYC,oBAAkB,QAClE,+CAEF,yBAAKF,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,WAAWG,IAAI,oBACzBF,WAAS,iBAAiBC,oBAAkB,SACjD,gCAAYF,UAAU,YAAYC,WAAS,OAAOC,oBAAkB,QAApE,QACA,gCAAYD,WAAS,WAAWC,oBAAkB,QAAlD,gUAOF,yBAAKF,UAAU,QACb,yBAAKA,UAAU,WAAWG,IAAI,oBACzBF,WAAS,YAAYC,oBAAkB,SAC5C,gCAAYF,UAAU,YAAYC,WAAS,OAAOC,oBAAkB,QAApE,QACA,gCAAYD,WAAS,WAAWC,oBAAkB,QAAlD,8VAOF,yBAAKF,UAAU,SACb,yBAAKA,UAAU,YAAYG,IAAI,qBAC1BF,WAAS,YAAYC,oBAAkB,SAC5C,gCAAYF,UAAU,aAAaC,WAAS,OAAOC,oBAAkB,QAArE,SACA,gCAAYD,WAAS,WAAWC,oBAAkB,QAAlD,6VAOF,yBAAKF,UAAU,OACb,yBAAKA,UAAU,UAAUG,IAAI,mBACxBF,WAAS,kBAAkBC,oBAAkB,SAClD,gCAAYF,UAAU,WAAWC,WAAS,OAAOC,oBAAkB,QAAnE,OACA,gCAAYD,WAAS,WAAWC,oBAAkB,QAAlD,qXAUN,yBAAKF,UAAU,YACb,yBAAKA,UAAU,YAAYC,WAAS,cAAcC,oBAAkB,QAClE,4BAAQF,UAAU,mBAChB,+CACA,yBAAKA,UAAU,YACb,4BAAQA,UAAU,YAAYI,MAAM,MAAMC,OAAO,MAAMF,IAAI,4CAA4CG,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,KAExN,gCAAYR,UAAU,kBAAtB,6XAQJ,yBAAKA,UAAU,WAAWC,WAAS,aAAaC,oBAAkB,QAChE,4BAAQF,UAAU,eAChB,iDACA,4BAAQA,UAAU,cAAcI,MAAM,MAAMC,OAAO,MAAMF,IAAI,4CAA4CG,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,KAE1N,4BAAQR,UAAU,WAChB,6CACA,4BAAQA,UAAU,SAASI,MAAM,MAAMC,OAAO,MAAMF,IAAI,oFAAoFG,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,SCjGnPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c22d28f2.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Aos from \"aos\";\nimport \"aos/dist/aos.css\";\n\n\nfunction clock() {\n  return (\n    new Date().toLocaleTimeString()\n  )\n}\n\nfunction App() {\n  useEffect(() => {\n    Aos.init();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"Head\">\n        <header className=\"App-header\" data-aos=\"fade\" data-aos-duration=\"10000\">\n          <h1>Three and a Half Asian Men Podcast</h1>\n          <img className=\"Banner-a\" src=\"./images/alex.png\"\n               data-aos=\"fade-up-right\" data-aos-duration=\"3000\"/>\n          <img className=\"Banner-b\" src=\"./images/chan.png\"\n               data-aos=\"fade-right\" data-aos-duration=\"3000\"/>\n          <img className=\"Banner-c\" src=\"./images/tarek.png\"\n               data-aos=\"fade-left\" data-aos-duration=\"3000\"/>\n          <img className=\"Banner-d\" src=\"./images/tim.png\"\n               data-aos=\"fade-up-left\" data-aos-duration=\"3000\"/>\n\n        </header>\n      </div>\n\n      <div className=\"About\">\n        <header className=\"About-us\" data-aos=\"fade-down\" data-aos-duration=\"1000\">\n          <h2>Meet the Cast!</h2>\n        </header>\n        <div className=\"About-img\">\n          <div className=\"Alex\">\n            <img className=\"Alex-img\" src=\"./images/alex.png\"\n                 data-aos=\"fade-down-left\" data-aos-duration=\"1500\"/>\n            <figcaption className=\"Alex-name\" data-aos=\"fade\" data-aos-duration=\"2000\">Alex</figcaption>\n            <figcaption data-aos=\"slide-up\" data-aos-duration=\"1500\">Alex is a rising\n              junior studying communications at Villanova University. As the mc\n              and host of the podcast, Alex leads the discussion and is an important\n              and necessary ground for a group that likes to go on tangents. When\n              not podcasting, Alex enjoys making music and creating banger Spotify\n              playlists of all genres.</figcaption>\n          </div>\n          <div className=\"Chan\">\n            <img className=\"Chan-img\" src=\"./images/chan.png\"\n                 data-aos=\"fade-down\" data-aos-duration=\"1500\"/>\n            <figcaption className=\"Chan-name\" data-aos=\"fade\" data-aos-duration=\"2000\">Chan</figcaption>\n            <figcaption data-aos=\"slide-up\" data-aos-duration=\"1500\">Chan is a rising\n              junior studying material science engineering at Carnegie Mellon University.\n              Truly a wildcard and x-factor to the group, Chan can stumble into the\n              butt end of many jokes while also sharing some very surprising and intriguing\n              experiences. Throughout the day, Chan will be decimating his opponents\n              in Tetris, eating, or slumbering.</figcaption>\n          </div>\n          <div className=\"Tarek\">\n            <img className=\"Tarek-img\" src=\"./images/tarek.png\"\n                 data-aos=\"fade-down\" data-aos-duration=\"1500\"/>\n            <figcaption className=\"Tarek-name\" data-aos=\"fade\" data-aos-duration=\"2000\">Tarek</figcaption>\n            <figcaption data-aos=\"slide-up\" data-aos-duration=\"1500\">Tarek is a rising\n              junior studying mathematics at Rutgers University. A natural-born jokester\n              and storyteller, Tarek exudes charisma and enthusiasm as he shares\n              some of his hilarious past experiences. You can often find Tarek watching\n              all things basketball, always looking to add to his plethora of Carmelo\n              Anthony or New York Knicks highlights.</figcaption>\n          </div>\n          <div className=\"Tim\">\n            <img className=\"Tim-img\" src=\"./images/tim.png\"\n                 data-aos=\"fade-down-right\" data-aos-duration=\"1500\"/>\n            <figcaption className=\"Tim-name\" data-aos=\"fade\" data-aos-duration=\"2000\">Tim</figcaption>\n            <figcaption data-aos=\"slide-up\" data-aos-duration=\"1500\">Tim is a rising\n              junior studying computer science at the University of Michigan. Known\n              as the IT/Tech guy, Tim manages the audio, visual, and web for the\n              podcast. Typically, youâ€™ll hear him making sarcastic one line comments\n              or trying to tell his stories with questionable English. In his free\n              time, Tim enjoys going on scenic drives and cooking with his sister.</figcaption>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"Episodes\">\n        <div className=\"Latest-ep\" data-aos=\"slide-right\" data-aos-duration=\"1500\">\n          <header className=\"Latest-ep-title\">\n            <h2>Latest Episode!</h2>\n            <div className=\"YT-res-1\">\n              <iframe className=\"YT-latest\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/K3Ven6AHMho\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n            </div>\n            <figcaption className=\"Latest-ep-desc\">The Three and a Half Asian Men\n                Podcast is back for our 7th episode: \"Goldfish and Subways and Excuses,\n                Oh My!\" (Wizard of Oz is a classic, no cap). For this episode, we\n                talk about our pet peeves, which happen to range from very legitimate\n                things, to just plain stupidity. We have a number of stories on this\n                podcast, so if you want to learn how to annoy Chan, please tune in.</figcaption>\n          </header>\n        </div>\n        <div className=\"Other-ep\" data-aos=\"slide-left\" data-aos-duration=\"1500\">\n          <header className=\"Featured-ep\">\n            <h2>Featured Episode!</h2>\n            <iframe className=\"YT-featured\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/BSUs6LnncO4\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n          </header>\n          <header className=\"All-eps\">\n            <h2>All Episodes!</h2>\n            <iframe className=\"YT-all\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/videoseries?list=PL937mUeeiKlNEAOYdax-2fqSPQ_qBJ3pj\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n          </header>\n        </div>\n      </div>\n\n    </div>\n\n\n\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}